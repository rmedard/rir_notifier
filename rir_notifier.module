<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\webform\WebformSubmissionInterface;

/**
 * Implements hook_page_attachments().
 */
function rir_notifier_page_attachments(array &$attachments) {
    if (Drupal::currentUser()->isAnonymous()) {
        $attachments['#attached']['library'][] = 'rir_notifier/rir_scripts';
        $attachments['#attached']['library'][] = 'core/drupal.dialog.ajax';
    }
}

/**
 * Implements hook_theme().
 */
function rir_notifier_theme($existing, $type, $theme, $path) {
    return [
      'rir_subscribe_search' => [
        'variables' => [
          'button' => t('Subscribe'),
        ],
      ],
    ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function rir_notifier_webform_submission_insert(WebformSubmissionInterface $entity) {
    if ($entity->getWebform()->id() == 'notification_subscription') {
        $location = $entity->getData('notif_property_location');
        $advertType = $entity->getData('notif_advert_type');
        $propertyType = $entity->getData('notif_property_type');
        $email = $entity->getData('notif_email');
        $firstName = $entity->getData('notif_firstname');
        $lastName = $entity->getData('notif_lastname');
        $referenceNbr = getRequestCategoryReference($location, $advertType, $propertyType);

        $alertsQueueWorker = Drupal::queue('alerts_processor');
        $data = (object) [
          'email' => $email,
          'first_name' => $firstName,
          'last_name' => $lastName,
          'reference' => $referenceNbr,
        ];
        $alertsQueueWorker->createItem($data);
    }
}

function getRequestCategoryReference($location, $advertType, $propertyType) {
    if (empty($location)) {
        $location = 'loc';
    }
    if (empty($advertType) or $advertType == 'All') {
        $advertType = 'ad';
    }
    if (empty($propertyType) or $propertyType == 'All') {
        $propertyType = 'pro';
    }
    return $location . '-' . $advertType . '-' . $propertyType;
}

/**
 * Implements hook_cron().
 */
function rir_notifier_cron() {
    $request_time = Drupal::time()->getRequestTime();
    $day = date('dmY', $request_time);
    $lastrun = Drupal::state()->get('notifications.last.sent');
    if (isset($lastrun)){
      if (date('dmY', $lastrun) == $day){
        Drupal::queue('campaigns_processor')->createItem(NULL);
        Drupal::state()->set('notifications.last.sent', $request_time);
        Drupal::logger('rir_notifier')->notice('Sending notifications scheduled!');
      }
    } else {
      $hour = date('H', $request_time);
      if (intval($hour) < 6){
        Drupal::queue('campaigns_processor')->createItem(NULL);
        Drupal::state()->set('notifications.last.sent', $request_time);
        Drupal::logger('rir_notifier')->notice('First sending notifications scheduled!');
      }
    }
}

function getHtmlContent($reference) {
    $dataAccessor = Drupal::service('rir_notifier.data_accessor');
    $keys = explode('-', $reference);
    $location = $keys[0];
    $advertType = $keys[1];
    $propertyType = $keys[2];
    $twig_service = Drupal::service('twig');
    $variables = [
      'adverts' => $dataAccessor->getDailyAdverts($location, $advertType, $propertyType),
    ];
    return $twig_service->loadTemplate(drupal_get_path('module', 'rir_notifier') . '/templates/rir-campaign.html.twig')->render($variables);
}