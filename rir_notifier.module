<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\webform\WebformSubmissionInterface;
use Mailchimp\Mailchimp;
use Mailchimp\MailchimpAPIException;
use Mailchimp\MailchimpCampaigns;
use Mailchimp\MailchimpLists;

/**
 * Implements hook_page_attachments().
 */
function rir_notifier_page_attachments(array &$attachments) {
    if (Drupal::currentUser()->isAnonymous()) {
        $attachments['#attached']['library'][] = 'rir_notifier/rir_scripts';
        $attachments['#attached']['library'][] = 'core/drupal.dialog.ajax';
    }
}

/**
 * Implements hook_theme().
 */
function rir_notifier_theme($existing, $type, $theme, $path) {
    return [
      'rir_subscribe_search' => [
        'variables' => [
          'button' => t('Subscribe'),
        ],
      ],
    ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function rir_notifier_webform_submission_insert(WebformSubmissionInterface $entity) {
    if ($entity->getWebform()->id() == 'notification_subscription') {
        $location = $entity->getData('notif_property_location');
        $advertType = $entity->getData('notif_advert_type');
        $propertyType = $entity->getData('notif_property_type');
        $email = $entity->getData('notif_email');
        $firstName = $entity->getData('notif_firstname');
        $lastName = $entity->getData('notif_lastname');
        $referenceNbr = getRequestCategoryReference($location, $advertType, $propertyType);

        $alertsQueueWorker = Drupal::queue('alerts_processor');
        $data = (object) [
          'email' => $email,
          'first_name' => $firstName,
          'last_name' => $lastName,
          'reference' => $referenceNbr,
        ];
        $alertsQueueWorker->createItem($data);
    }
}

function getRequestCategoryReference($location, $advertType, $propertyType) {
    if (empty($location)) {
        $location = 'loc';
    }
    if (empty($advertType) or $advertType == 'All') {
        $advertType = 'ad';
    }
    if (empty($propertyType) or $propertyType == 'All') {
        $propertyType = 'pro';
    }
    return $location . '-' . $advertType . '-' . $propertyType;
}

/**
 * Implements hook_cron().
 */
function rir_notifier_cron() {
    $dataAccessor = Drupal::service('rir_notifier.data_accessor');
    $APIKey = $dataAccessor->getMailchimpAPIKey();
    $campaigns = new MailchimpCampaigns($APIKey);
    $lists = new MailchimpLists($APIKey);
    $mailchimp = new Mailchimp($APIKey);
    $interestObj = Node::load(132);
    if ($interestObj instanceof NodeInterface and $interestObj->bundle() == 'details_request_category') {
        $reference = $interestObj->get('field_dr_reference')->value;
        if ($dataAccessor->countAdvertsByReference($reference) > 0) {
          $list_id = $interestObj->get('field_mailchimp_list_id')->value;
          $category_id = $interestObj->get('field_mailchimp_category_id')->value;
          $interest_ids = $interestObj->get('field_mailchimp_interest_id')->value;
          Drupal::logger('rir_notifier')->debug('list: ' . $list_id . ' category: ' . $category_id . ' interest: ' .$interest_ids);
            $members = $lists->getMembers($list_id,
              array('status' => MailchimpLists::MEMBER_STATUS_SUBSCRIBED, 'interest_category_id' => $category_id, 'interest_ids' => $interest_ids, 'interest_match' => 'all')
            );
//            $members_obj = (object)['list_id' => $list_id, 'segment_opts' => (object)['match' => 'all', 'conditions' => array('condition_type' => 'Interests', (object)['op' => 'interestcontains', 'field' => $reference])]];
            $members_obj = (object)['list_id' => $list_id, 'segment_opts' => (object)['saved_segment_id' => intval($interestObj->get('field_mailchimp_segment_id')->value)]];
            $members_array = json_decode(json_encode($members, TRUE));
            if ($members_array->total_items == 1) {
                $settings = [
                  'subject_line' => 'Interesting adverts',
                  'title' => 'Campaign - ' . $reference,
                  'from_name' => Drupal::config('system.site')->get('name'),
                  'reply_to' => Drupal::config('system.site')->get('mail'),
                  'inline_css' => TRUE,
                ];
                $campaign = NULL;
                try {
                    $campaign = $campaigns->addCampaign(MailchimpCampaigns::CAMPAIGN_TYPE_REGULAR, $members_obj, (object) $settings);
                    if ($campaign){
                        $campaign = json_decode(json_encode($campaign, TRUE));
                        Drupal::logger('rir_notifier')->debug('Created campaign: ' . $campaign->id);
                        try {
                            $obj = $campaigns->setCampaignContent($campaign->id, ['html' => getHtmlContent($reference)]);
                            if (!empty($obj)){
                                $campaigns->send($campaign->id, FALSE);
                                //$mailchimp->processBatchOperations();
                            } else {
                                Drupal::logger('rir_notifier')->debug('Empty campaign content: ' . $campaign->id);
                            }
                        } catch (MailchimpAPIException $exp1) {
                            Drupal::logger('rir_notifier')->error('Sending Campaign: ' . $exp1->getMessage() . ' Full trace: ' . $exp1->getTraceAsString());
                        }
                    }
                } catch (MailchimpAPIException $exp2){
                    Drupal::logger('rir_notifier')->error('Creating Campaign: ' . $exp2->getMessage() . ' Full trace: ' . $exp2->getTraceAsString());
                }
            } else {
              Drupal::logger('rir_notifier')->debug('More members than expected');
            }
        } else {
            Drupal::logger('rir_notifier')->debug('No adverts found for reference: ' . $reference);
        }
    } else {
        Drupal::logger('rir_notifier')->error('Interest Object not found');
    }
}

function getHtmlContent($reference) {
    $dataAccessor = Drupal::service('rir_notifier.data_accessor');
    $keys = explode('-', $reference);
    $location = $keys[0];
    $advertType = $keys[1];
    $propertyType = $keys[2];
    $twig_service = Drupal::service('twig');
    $variables = [
      'adverts' => $dataAccessor->getDailyAdverts($location, $advertType, $propertyType),
    ];
    return $twig_service->loadTemplate(drupal_get_path('module', 'rir_notifier') . '/templates/rir-campaign.html.twig')->render($variables);
}